<%- include("../../views/partials/user/header") %>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="/js/razorpay.js"></script>

    <div class="container py-5">
        <div class="row g-4">
            <!-- Order Summary -->
            <div class="col-lg-7">
                <div class="custom-card p-4 mb-4">
                    <h3 class="mb-4 fw-bold">Order Summary</h3>
                    <% cart.items.forEach(item=> { %>
                        <div class="row align-items-center mb-4">
                            <div class="col-3 col-md-2">
                                <img src="/uploads/<%= item.productId.productImage[0] %>"
                                    class="img-fluid product-image" alt="<%= item.productId.productName %>">
                            </div>
                            <div class="col-6 col-md-5">
                                <h6 class="mb-1 fw-semibold">
                                    <%= item.productId.productName %>
                                </h6>
                                <p class="text-muted mb-0">Quantity: <%= item.quantity %>
                                </p>
                                <p class="text-primary mb-0">₹<%= item.productId.salePrice %>
                                </p>
                            </div>
                            <div class="col-3 text-end">
                                <h6 class="fw-semibold mb-0">₹<%= item.productId.salePrice * item.quantity %>
                                </h6>
                            </div>
                        </div>
                        <% }); %>

                            <div class="divider"></div>

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <h6 class="mb-0">Subtotal</h6>
                                </div>
                                <h6 class="mb-0" data-summary="subtotal">₹<%= cart.subtotal %>
                                </h6>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div>
                                    <h6 class="mb-0">GST (5%)</h6>
                                </div>
                                <h6 class="mb-0" data-summary="tax">₹<%= cart.tax %>
                                </h6>
                            </div>

                            <% if (cart.discountAmount> 0) { %>
                                <div class="d-flex justify-content-between align-items-center mb-2"
                                    data-summary="discount-section">
                                    <div>
                                        <h6 class="mb-0 text-success">Discount</h6>
                                        <% if (cart.appliedCoupon) { %>
                                            <small class="text-muted">Coupon: <%= cart.appliedCoupon.name %></small>
                                            <% } %>
                                    </div>
                                    <h6 class="mb-0 text-success" data-summary="discount">-₹<%= cart.discountAmount %>
                                    </h6>
                                </div>
                                <% } %>

                                    <div class="divider"></div>

                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h5 class="fw-bold mb-0">Total Amount</h5>
                                            <p class="text-muted small mb-0">Including GST</p>
                                        </div>
                                        <h4 class="fw-bold mb-0" data-summary="total">₹<%= cart.total.toFixed(2) %>
                                        </h4>
                                    </div>
                </div>
            </div>

            <!-- Checkout Form -->
            <div class="col-lg-5">
                <div class="custom-card p-4 mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h3 class="fw-bold m-0">Shipping Details</h3>
                        <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal"
                            data-bs-target="#addAddressModal">
                            <i class="fas fa-plus me-2"></i>Add New
                        </button>
                    </div>

                    <% if (addresses && addresses.length> 0) { %>
                        <div class="address-list">
                            <% addresses.forEach((address, index)=> { %>
                                <div class="address-card mb-3" data-address-id="<%= address._id %>">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="addressId"
                                            id="address-<%= address._id %>" value="<%= address._id %>" <%=index===0
                                            ? 'checked' : '' %> required>
                                        <label class="form-check-label" for="address-<%= address._id %>">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div>
                                                    <strong class="d-block">
                                                        <%= address.name %>
                                                    </strong>
                                                    <span class="badge bg-light text-dark mb-2">
                                                        <%= address.addressType %>
                                                    </span>
                                                    <p class="mb-1">
                                                        <%= address.landMark %>
                                                    </p>
                                                    <p class="mb-1">
                                                        <%= address.city %>, <%= address.state %>
                                                                <%= address.pincode %>
                                                    </p>
                                                    <p class="mb-0">
                                                        <i class="fas fa-phone-alt me-1"></i>
                                                        <%= address.phone %>
                                                            <% if (address.altPhone) { %>
                                                                <br><i class="fas fa-phone-alt me-1"></i>
                                                                <%= address.altPhone %>
                                                                    <% } %>
                                                    </p>
                                                </div>
                                            </div>
                                        </label>
                                    </div>
                                </div>
                                <% }); %>
                        </div>
                        <% } else { %>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>No addresses found. Please add a delivery
                                address.
                            </div>
                            <% } %>
                </div>

                <div class="custom-card p-4 mb-4">
                    <h3 class="mb-4 fw-bold">Apply Coupon</h3>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code">
                        <button class="btn btn-primary" type="button" id="applyCouponBtn">
                            <i class="fas fa-tag me-2"></i>Apply
                        </button>
                        <% if (cart.appliedCoupon) { %>
                            <button class="btn btn-danger ms-2" type="button" id="removeCouponBtn">
                                <i class="fas fa-times me-2"></i>Remove
                            </button>
                            <% } %>
                    </div>
                    <button class="btn btn-secondary mt-2" id="listCouponsBtn">Show All Coupons</button>
                    <div id="couponMessage" class="small"></div>
                    <div id="availableCoupons" class="mt-3" style="display: none;">
                        <h4>Available Coupons</h4>
                        <ul class="list-group" id="couponList"></ul>
                    </div>
                </div>


                <div class="custom-card p-4 mb-4">
                    <h3 class="fw-bold mb-4">Payment Method</h3>
                    <div class="payment-methods">
                        <div class="form-check mb-3">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="COD"
                                checked>
                            <label class="form-check-label d-flex align-items-center" for="cod">
                                <i class="fas fa-money-bill-wave me-2"></i>
                                Cash on Delivery
                            </label>
                        </div>

                        <div class="form-check mb-3">
                            <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay"
                                value="RAZORPAY">
                            <label class="form-check-label d-flex align-items-center" for="razorpay">
                                <i class="fas fa-credit-card me-2"></i>
                                Pay Online (Credit/Debit Card, UPI, Net Banking)
                                <img src="https://razorpay.com/assets/razorpay-logo.svg" alt="Razorpay" height="20"
                                    class="ms-2">
                            </label>
                        </div>
                    </div>
                </div>

                <div class="d-grid">
                    <button type="button" class="btn btn-primary btn-lg" id="placeOrderBtn">
                        <i class="fas fa-shopping-bag me-2"></i>Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Address Modal -->
    <div class="modal fade" id="addAddressModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addressForm">
                        <div class="mb-3">
                            <label class="form-label">Full Name</label>
                            <input type="text" name="name" class="form-control">
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone Number</label>
                                <input type="tel" name="phone" class="form-control">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Alternate Phone</label>
                                <input type="tel" name="altPhone" class="form-control">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Landmark/Street</label>
                            <input type="text" name="landMark" class="form-control">
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">City</label>
                                <input type="text" name="city" class="form-control">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">State</label>
                                <input type="text" name="state" class="form-control">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">PIN Code</label>
                                <input type="text" name="pincode" id="pincode" class="form-control">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Address Type</label>
                                <select name="addressType" class="form-select">
                                    <option value="Home">Home</option>
                                    <option value="Work">Work</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveAddressBtn">Save Address</button>
                </div>
            </div>
        </div>
    </div>

    <style>
        .custom-card {
            background: #ffffff;
            border: none;
            border-radius: 16px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        }

        .product-image {
            border-radius: 8px;
            object-fit: cover;
            height: 80px;
            width: 80px;
        }

        .divider {
            height: 1px;
            background: #e0e0e0;
            margin: 2rem 0;
        }

        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .address-card:hover {
            border-color: #0d6efd;
            background-color: #f8f9fa;
        }

        .address-card.selected {
            border-color: #0d6efd;
            background-color: #f8f9fa;
        }

        .address-card .form-check {
            margin: 0;
            padding: 0;
        }

        .address-card .form-check-input {
            float: none;
            margin: 0;
            position: absolute;
            top: 1rem;
            right: 1rem;
        }

        .address-card .form-check-label {
            padding: 0;
            margin: 0;
            width: 100%;
            cursor: pointer;
        }

        #placeOrderBtn {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .badge {
            font-weight: normal;
            font-size: 0.8rem;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Coupon handling
        const applyCouponBtn = document.getElementById('applyCouponBtn');
        const couponCode = document.getElementById('couponCode');
        const couponMessage = document.getElementById('couponMessage');
        const removeCouponBtn = document.getElementById('removeCouponBtn');

        applyCouponBtn.addEventListener('click', async function () {
            const code = couponCode.value.trim();
            if (!code) {
                showCouponMessage('Please enter a coupon code', 'text-danger');
                return;
            }

            try {
                applyCouponBtn.disabled = true;
                applyCouponBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Applying...';

                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ couponCode: code })
                });

                const data = await response.json();

                if (data.success) {
                    showCouponMessage(data.message, 'text-success');
                    updateOrderSummary(data);
                    Swal.fire({
                        icon: 'success',
                        title: 'Coupon Applied!',
                        text: data.message,
                    });
                } else {
                    showCouponMessage(data.message, 'text-danger');
                    Swal.fire({
                        icon: 'error',
                        title: 'Coupon Error',
                        text: data.message,
                    });
                }
            } catch (error) {
                showCouponMessage('Error applying coupon. Please try again.', 'text-danger');
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to apply coupon. Please try again.',
                });
            } finally {
                applyCouponBtn.disabled = false;
                applyCouponBtn.innerHTML = '<i class="fas fa-tag me-2"></i>Apply';
            }
        });

        //remove coupon
        if (removeCouponBtn) {
            removeCouponBtn.addEventListener('click', async function () {
                try {
                    removeCouponBtn.disabled = true;
                    removeCouponBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Removing...';

                    const response = await fetch('/remove-coupon', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });

                    const data = await response.json();
                    if (data.success) {
                        showCouponMessage(data.message, 'text-success');
                        updateOrderSummary(data);
                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Removed!',
                            text: data.message,
                        });
                    } else {
                        showCouponMessage(data.message, 'text-danger');
                        Swal.fire({
                            icon: 'error',
                            title: 'Coupon Error',
                            text: data.message,
                        });
                    }
                } catch (error) {
                    showCouponMessage('Error removing coupon. Please try again.', 'text-danger');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to remove coupon. Please try again.',
                    });
                } finally {
                    removeCouponBtn.disabled = false;
                    removeCouponBtn.innerHTML = '<i class="fas fa-times me-2"></i>Remove';
                }
            });
        }
        //message for coupon
        function showCouponMessage(message, className) {
            couponMessage.textContent = message;
            couponMessage.className = 'small ' + className;
        }

        function updateOrderSummary(data) {
            // Update subtotal
            document.querySelector('[data-summary="subtotal"]').textContent = '₹' + data.subtotal;

            // Update tax
            document.querySelector('[data-summary="tax"]').textContent = '₹' + data.tax;

            // Update discount section
            const discountSection = document.querySelector('[data-summary="discount-section"]');
            if (data.discountAmount > 0) {
                if (!discountSection) {
                    const newDiscountSection = `
                    <div class="d-flex justify-content-between align-items-center mb-2" data-summary="discount-section">
                        <div>
                            <h6 class="mb-0 text-success">Discount</h6>
                            ${data.appliedCoupon ? `<small class="text-muted">Coupon: ${data.appliedCoupon.name}</small>` : ''}
                        </div>
                        <h6 class="mb-0 text-success" data-summary="discount">-₹${data.discountAmount}</h6>
                    </div>`;
                    const totalElement = document.querySelector('[data-summary="total"]').parentElement.parentElement;
                    totalElement.insertAdjacentHTML('beforebegin', newDiscountSection);
                } else {
                    const discountElement = discountSection.querySelector('[data-summary="discount"]');
                    discountElement.textContent = `-₹${data.discountAmount}`;
                    const couponNameElement = discountSection.querySelector('small.text-muted');
                    if (data.appliedCoupon && couponNameElement) {
                        couponNameElement.textContent = `Coupon: ${data.appliedCoupon.name}`;
                    }
                }
            } else if (discountSection) {
                discountSection.remove();
            }

            // Update total
            document.querySelector('[data-summary="total"]').textContent = '₹' + data.total;

            // If coupon is removed, reload the page after a short delay
            if (!data.appliedCoupon) {
                setTimeout(() => {
                    location.reload();
                }, 1000);
            }
        }

        const placeOrderBtn = document.getElementById('placeOrderBtn');
        const cartTotal = '<%= cart.total %>'
        const userDetails = {
            name: '<%= user.name %>',
            email: '<%= user.email %>',
            phone: '<%= user.phone %>'
        };

        // Initialize Razorpay key
        const RAZORPAY_KEY_ID = '<%= razorpayKey %>';

        placeOrderBtn.addEventListener('click', async function (e) {
            e.preventDefault();

            // Get selected address and payment method
            const selectedAddress = document.querySelector('input[name="addressId"]:checked');
            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');

            if (!selectedAddress) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a delivery address'
                });
                return;
            }

            if (!selectedPayment) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Please select a payment method'
                });
                return;
            }

            const addressId = selectedAddress.value;
            const paymentMethod = selectedPayment.value;

            // Disable button and show loading state
            placeOrderBtn.disabled = true;
            placeOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';

            try {
                if (paymentMethod === 'RAZORPAY') {
                    // Initialize Razorpay payment
                    const response = await fetch('/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ addressId })
                    });

                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }

                    const options = {
                        key: RAZORPAY_KEY_ID,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        name: 'ArrowMart',
                        description: 'Purchase from ArrowMart',
                        order_id: data.order.id,
                        handler: async function (response) {
                            try {
                                // Verify payment
                                const verifyResponse = await fetch('/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (!verifyData.success) {
                                    throw new Error(verifyData.message);
                                }

                                // Place order
                                const orderResponse = await fetch('/place-order', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        addressId,
                                        paymentMethod: 'RAZORPAY',
                                        razorpayOrderId: response.razorpay_order_id
                                    })
                                });

                                const orderData = await orderResponse.json();
                                if (!orderData.success) {
                                    throw new Error(orderData.message);
                                }

                                window.location.href = `/order-success?orderId=${orderData.orderId}`;
                            } catch (error) {
                                console.error('Payment verification failed:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: error.message || 'Payment verification failed. Please contact support if amount was deducted.'
                                });
                                placeOrderBtn.disabled = false;
                                placeOrderBtn.innerHTML = '<i class="fas fa-shopping-bag me-2"></i>Place Order';
                            }
                        },
                        prefill: {
                            name: userDetails.name,
                            email: userDetails.email,
                            contact: userDetails.phone
                        },
                        theme: {
                            color: '#3399cc'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();

                    // Reset button state
                    placeOrderBtn.disabled = false;
                    placeOrderBtn.innerHTML = '<i class="fas fa-shopping-bag me-2"></i>Place Order';
                } else {
                    // Handle other payment methods (COD)
                    const response = await fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            addressId,
                            paymentMethod
                        })
                    });

                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }

                    window.location.href = `/order-success?orderId=${data.orderId}`;
                }
            } catch (error) {
                console.error('Error placing order:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to place order. Please try again.'
                });

                // Reset button state
                placeOrderBtn.disabled = false;
                placeOrderBtn.innerHTML = '<i class="fas fa-shopping-bag me-2"></i>Place Order';
            }
        });
        });

        //lis coupons for checkout
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('listCouponsBtn').addEventListener('click', async () => {
                const couponContainer = document.getElementById('availableCoupons');
                const couponList = document.getElementById('couponList');

                if (couponContainer.style.display === 'block') {

                    couponContainer.style.display = 'none';
                    document.getElementById('listCouponsBtn').textContent = 'Show All Coupons';
                    return;
                }
                try {
                    const response = await fetch('/coupons');
                    const data = await response.json();

                    if (data.success) {
                        couponList.innerHTML = '';
                        data.coupons.forEach(coupon => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.innerHTML = `
                        <strong>${coupon.name}</strong> - ₹${coupon.offerPrice} off 
                        (Min. ₹${coupon.minimumPrice})
                    `;
                            couponList.appendChild(li);
                        });
                        couponContainer.style.display = 'block';
                        document.getElementById('listCouponsBtn').textContent = 'Hide Coupons';
                    } else {
                        couponList.innerHTML = '<li class="list-group-item">No coupons available</li>';
                        couponContainer.style.display = 'block';
                        document.getElementById('listCouponsBtn').textContent = 'Hide Coupons';
                    }
                } catch (error) {
                    console.error('Error fetching coupons:', error);
                    couponList.innerHTML = '<li class="list-group-item text-danger">Failed to fetch coupons</li>';
                    couponContainer.style.display = 'block';
                    document.getElementById('listCouponsBtn').textContent = 'Hide Coupons';
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById("addressForm").addEventListener("submit", async (event) => {
                event.preventDefault();

                const addressType = document.getElementById("address_type");
                const name = document.getElementById("name");
                const city = document.getElementById("city");
                const landMark = document.getElementById("landMark");
                const state = document.getElementById("state");
                const pincode = document.getElementById("pincode");
                const phone = document.getElementById("phone");
                const altPhone = document.getElementById("altPhone");

                let isValid = true;

                // Clear previous error messages
                document.querySelectorAll(".error-message").forEach((el) => el.remove());

                // Helper function to show errors
                const showError = (field, message) => {
                    const error = document.createElement("div");
                    error.className = "text-danger error-message";
                    error.innerText = message;
                    field.parentElement.appendChild(error);
                    isValid = false;
                };

                // Validation checks
                if (!addressType.value.trim()) showError(addressType, "Address Type is required.");
                if (!name.value.trim()) showError(name, "Name is required.");
                if (!city.value.trim()) showError(city, "City is required.");
                if (!landMark.value.trim()) showError(landMark, "Landmark is required.");
                if (!state.value.trim()) showError(state, "State is required.");
                if (!pincode.value || !/^\d{6}$/.test(pincode.value.trim()))
                    showError(pincode, "Pincode must be a 6-digit number.");
                if (!phone.value || !/^\d{10}$/.test(phone.value.trim()))
                    showError(phone, "Phone must be a 10-digit number.");
                if (!altPhone.value || !/^\d{10}$/.test(altPhone.value.trim()))
                    showError(altPhone, "Alternate Phone must be a 10-digit number.");

                if (!isValid) {
                    return;
                }

                // Submit form if validation passes
                try {
                    saveAddressBtn.disabled = true;
                    saveAddressBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';
                    const formData = new FormData(addressForm);
                    const addressData = Object.fromEntries(formData.entries());

                    const response = await fetch('/addAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(addressData)
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: data.message,
                            timer: 1500
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Failed to add address');
                    }
                } catch (error) {
                    console.error('Address submission error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message
                    });
                } finally {
                    saveAddressBtn.disabled = false;
                    saveAddressBtn.innerHTML = 'Save Address';
                }
            });
        })
        


    </script>

    <%- include("../../views/partials/user/footer") %>