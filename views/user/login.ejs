<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        *{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Arial', sans-serif;
    background: url('https://source.unsplash.com/1600x900/?archery,target') no-repeat center center/cover;
    color: #fff;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background: rgba(0, 0, 0, 0.7);
    padding: 20px 30px;
    border-radius: 15px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
    width: 100%;
    max-width: 400px;
}

.login-form h1 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 20px;
    font-weight: bold;
    color: #f8e71c;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #fff;
}

input {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    outline: none;
}

input:focus {
    border: 2px solid #f8e71c;
}

.btn {
    width: 100%;
    background-color: #f8e71c;
    color: #333;
    padding: 10px;
    border: none;
    border-radius: 5px;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn:hover {
    background-color: #c2a617;
}

p {
    text-align: center;
    margin-top: 15px;
}

p a {
    color: #f8e71c;
    text-decoration: none;
}

p a:hover {
    text-decoration: underline;
}

.error {
    color: #de1212;
    font-size: 14px;
    margin-top: 5px;
}

    </style>
</head>
<body>
    <div class="container">
        <form class="login-form" id="loginForm">
            <h1>Login</h1>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" name="email" id="email" placeholder="Enter your email" required>
                <span class="error" id="emailError"></span>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" name="password" id="password" placeholder="Enter your password" required>
                <span class="error" id="passwordError"></span>
            </div>
            <button type="submit" class="btn">Sign In</button>
            <p>Not a member? <a href="signup">Register here</a></p>
        </form>
    </div>

    <script>
          const loginForm = document.getElementById('loginForm');

   loginForm.addEventListener('submit', async function (event) {
  event.preventDefault();


    document.getElementById("emailError").innerText = "";
    document.getElementById("passwordError").innerText = "";
   

   const email=document.getElementById("email").value.trim()
   const password=document.getElementById("password").value.trim()

   let isValid=true



   const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    if (!email || !emailRegex.test(email)) {
        document.getElementById("emailError").innerText = "Please enter a valid email address.";
        isValid = false;
    }

    // Validate password (basic length check)
    if (!password || password.length < 3) {
        document.getElementById("passwordError").innerText = "Password must be at least 6 characters.";
        isValid = false;
    }
    if (isValid) {
        try {
            const response = await fetch("/login", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ email, password }),
            });
        // Safely handle different response types
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
          result = await response.json(); // Parse as JSON
        } else {
          result = { message: await response.text() }; // Parse as plain text
        } 

        if (response.ok) {
            // Display success message and delay redirection
            Swal.fire(result.message).then(() => {
                setTimeout(() => {
                    window.location.href = "/";
                }, 2000); 
            });
        } else {
        
            const errorMessage = result.message || "Login failed. Please try again.";
            Swal.fire(errorMessage);
        }
        } catch (error) {
            console.error("Login request error:", error);
            Swal.fire("Login failed. Please try again later.");
        }
    }
   })
   
   </script>

</body>
</html>
 
