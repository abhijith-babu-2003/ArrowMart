<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <style>
        .image-upload-box {
            border: 2px dashed #ccc;
            border-radius: 10px;
            height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .image-upload-box:hover {
            background-color: #f8f9fa;
        }

        .image-upload-box img {
            max-width: 100%;
            max-height: 180px;
            object-fit: contain;
        }

        .error-message {
            color: red;
            font-size: 0.85rem;
        }

        #imagePreviewModal .modal-dialog {
            max-width: 800px;
        }

        #imagePreviewModal .cropper-container {
            max-height: 500px;
        }
    </style>


    <div class="container-fluid">
        <section class="content-main">
            <div class="row">
                <div class="col-12">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                    </div>
                </div>
                <div class="col-lg-8">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form id="productForm">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="product_name" class="form-label">Product Name</label>
                                        <input type="text" placeholder="Type here" name="productName"
                                            class="form-control" id="product_name">
                                        <div id="productName-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Full description</label>
                                    <textarea placeholder="Type here" id="descriptionid" name="description"
                                        class="form-control border" rows="4"></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Regular Price</label>
                                            <input placeholder="$" name="regularPrice" type="text"
                                                class="form-control border">
                                            <div id="regularPrice-error" class="error-message"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Sale Price</label>
                                            <input placeholder="$" name="salePrice" type="text"
                                                class="form-control border">
                                            <div id="salePrice-error" class="error-message"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Stock</label>
                                            <input placeholder="" name="quantity" type="text"
                                                class="form-control border">
                                            <div id="quantity-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-4">
                                        <div class="mb-4">
                                            <label class="form-label">Color</label>
                                            <input name="color" type="text" class="form-control border">
                                            <div id="color-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card mb-4">
                                    <div class="card-body">
                                        <div class="row gx-2">
                                            <div class="col-sm-6 mb-3">
                                                <label class="form-label">Category</label>
                                                <select class="form-select border" name="category">
                                                    <% for(let i=0;i<cat.length;i++){%>
                                                        <option value="<%= cat[i].categoryName%>">
                                                            <%= cat[i].categoryName%>
                                                        </option>
                                                        <% } %>
                                                </select>
                                                <div id="category-error" class="error-message"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h4>Product Images</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <% for(let i=1; i<=4; i++) { %>
                                                <div class="col-md-3 mb-3">
                                                    <div class="image-upload-box" id="imageBox<%= i %>"
                                                        data-index="<%= i %>">
                                                        <img src="" alt="Preview" id="previewImage<%= i %>"
                                                            style="display:none;">
                                                        <div class="text-center">
                                                            <i class="fas fa-cloud-upload-alt"></i>
                                                            <p>Choose Image</p>
                                                        </div>
                                                        <input type="file" name="images" id="imageInput<%= i %>"
                                                            accept="image/*" style="display:none;">
                                                    </div>
                                                    <div id="imageError<%= i %>" class="error-message"></div>
                                                </div>
                                                <% } %>
                                        </div>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary" id="submitBtn">Publish Product</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Image Preview and Crop Modal -->
    <div class="modal fade" id="imagePreviewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Crop and Preview Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-8">
                            <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                        </div>
                        <div class="col-md-4">
                            <div id="previewContainer">
                                <div class="preview"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveCroppedImage">Save Image</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let currentImageIndex = 0;
        let cropper;
        const validImageFormats = ["image/jpeg", "image/png", "image/jpg"];

        document.querySelectorAll('.image-upload-box').forEach(box => {
            box.addEventListener('click', function () {
                const input = this.querySelector('input[type="file"]');
                input.click();
            });

            const input = box.querySelector('input[type="file"]');
            input.addEventListener('change', function (event) {
                const file = event.target.files[0];
                currentImageIndex = this.closest('.image-upload-box').dataset.index;

                if (file) {
                    if (!validImageFormats.includes(file.type)) {
                        alert('Invalid image format. Please upload JPG or PNG.');
                        event.target.value = '';
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imagePreviewModal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
                        const cropperImage = document.getElementById('cropperImage');
                        cropperImage.src = e.target.result;

                        if (cropper) cropper.destroy();

                        imagePreviewModal.show();
                        setTimeout(() => {
                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                                preview: '.preview',
                            });
                        }, 500);
                    };
                    reader.readAsDataURL(file);
                }
            });
        });

        document.getElementById('saveCroppedImage').addEventListener('click', function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            const previewImg = document.getElementById(`previewImage${currentImageIndex}`);
            const imageBox = document.getElementById(`imageBox${currentImageIndex}`);
            const imageInput = document.getElementById(`imageInput${currentImageIndex}`);

            previewImg.src = croppedCanvas.toDataURL('image/jpeg');
            previewImg.style.display = 'block';
            imageBox.querySelector('div.text-center').style.display = 'none';

            croppedCanvas.toBlob(blob => {
                const file = new File([blob], `cropped-image-${currentImageIndex}.jpg, { type: 'image/jpeg' }`);
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                imageInput.files = dataTransfer.files;
            });

            const imagePreviewModal = bootstrap.Modal.getInstance(document.getElementById('imagePreviewModal'));
            imagePreviewModal.hide();
            cropper.destroy();
        });



        document.getElementById('productForm').addEventListener('submit', async function (e) {
    e.preventDefault();  

    let isValid = true; 
    const errorMessages = {
        productName: "Product name is required.",
        description: "Description is required.",
        regularPrice: "Regular price is required and should be a positive number.",
        salePrice: "Sale price is required and should be a positive number.",
        quantity: "Stock quantity is required and should be a positive number.",
        color: "Color is required.",
        category: "Category is required.",
        images: "At least one image is required."
    };

    // Clear existing error messages
    document.querySelectorAll(".error-message").forEach((errorElement) => {
        errorElement.textContent = '';
    });

    // Product Name Validation
    const productName = document.getElementById("product_name").value.trim();
    if (!productName) {
        document.getElementById("productName-error").textContent = errorMessages.productName;
        isValid = false;
    }

    // Description Validation
    const description = document.getElementById("descriptionid").value.trim();
    if (!description) {
        document.getElementById("description-error").textContent = errorMessages.description;
        isValid = false;
    }

    // Regular Price Validation
    const regularPrice = Number(document.querySelector('[name="regularPrice"]').value.trim());
    if (isNaN(regularPrice) || regularPrice <= 0) {
        document.getElementById("regularPrice-error").textContent = errorMessages.regularPrice;
        isValid = false;
    }

    // Sale Price Validation
    const salePrice = Number(document.querySelector('[name="salePrice"]').value.trim());
    if (isNaN(salePrice) || salePrice <= 0) {
        document.getElementById("salePrice-error").textContent = errorMessages.salePrice;
        isValid = false;
    }

    // Quantity Validation
    const quantity = Number(document.querySelector('[name="quantity"]').value.trim());
    if (isNaN(quantity) || quantity <= 0) {
        document.getElementById("quantity-error").textContent = errorMessages.quantity;
        isValid = false;
    }

    // Color Validation
    const color = document.querySelector('[name="color"]').value.trim();
    if (!color) {
        document.getElementById("color-error").textContent = errorMessages.color;
        isValid = false;
    }

    // Category Validation
    const category = document.querySelector('[name="category"]').value.trim();
    if (!category) {
        document.getElementById("category-error").textContent = errorMessages.category;
        isValid = false;
    }

    // Image Validation
    const imageInputs = document.querySelectorAll('[name="images"]');
    let imageUploaded = false;
    imageInputs.forEach((input) => {
        if (input.files && input.files.length > 0) {
            imageUploaded = true;
        }
    });
    if (!imageUploaded) {
        document.getElementById("imageError1").textContent = errorMessages.images;
        isValid = false;
    }


   
    if (isValid) {
    const formData = new FormData(this);

    try {
        const response = await fetch('/admin/addProducts', {
            method: 'POST',
            body: formData,
        });

        const result = await response.json();

        if (response.ok) {
            Swal.fire({
                title: 'Success!',
                text: result.message || 'Product added successfully!',
                icon: 'success',
                confirmButtonText: 'OK',
                confirmButtonColor: '#3085d6',
            }).then(() => {
                window.location.href = "/admin/products";
            });
        } else {
            Swal.fire({
                title: 'Error',
                text: result.message || 'Failed to add product. Please try again.',
                icon: 'error',
                confirmButtonText: 'Retry',
                confirmButtonColor: '#d33',
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: 'An unexpected error occurred. Please try again later.',
            icon: 'error',
            confirmButtonText: 'Close',
            confirmButtonColor: '#d33',
        });
    }
}

});

    </script>




    <script src="path/to/your/validation-script.js"></script>

    <%- include("../../views/partials/admin/footer") %>