<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
        <style>
            /* Main Layout */
            body {
                background-color: #f8f9fa;
            }

            .content-main {
                padding: 2rem;
            }

            .content-header {
                background: white;
                padding: 1.5rem;
                border-radius: 15px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
                margin-bottom: 2rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .content-title {
                font-size: 1.8rem;
                color: #2d3436;
                margin: 0;
            }

            /* Card Styles */
            .card {
                background: white;
                border: none;
                border-radius: 15px;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
                overflow: hidden;
                margin-bottom: 2rem;
            }

            .card-body {
                padding: 2rem;
            }

            /* Table Styles */
            .table {
                width: 100%;
                background: white;
                margin-bottom: 0;
            }

            .table thead th {
                background: #f8f9fa;
                color: #2d3436;
                font-weight: 600;
                padding: 1.2rem 1rem;
                border: none;
                text-transform: uppercase;
                font-size: 0.85rem;
            }

            .table tbody tr {
                transition: transform 0.2s;
            }

            .table tbody tr:hover {
                background-color: #f8f9fa;
                transform: translateY(-2px);
            }

            .table td {
                padding: 1rem;
                vertical-align: middle;
                border-top: 1px solid #f1f2f6;
            }

            .table img {
                width: 50px;
                height: 50px;
                object-fit: cover;
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            }

            /* Button Styles */
            .btn {
                padding: 0.8rem 1.5rem;
                border-radius: 8px;
                font-weight: 500;
                transition: all 0.3s ease;
                border: none !important;
            }

            .btn-primary {
                background: #4834d4 !important;
                color: white !important;
            }

            .btn-primary:hover {
                background: #3a2bb8 !important;
                transform: translateY(-2px);
            }

            .btn-info {
                background: #00cec9 !important;
                color: white !important;
            }

            .btn-info:hover {
                background: #00b5b1 !important;
            }

            .btn-danger {
                background: #ff7675 !important;
                color: white !important;
            }

            .btn-danger:hover {
                background: #ff4757 !important;
            }

            /* Action Buttons */
            .action-buttons {
                display: flex;
                gap: 0.8rem;
                justify-content: center;
            }

            /* Modal Styles */
            .modal-content {
                border: none;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            }

            .modal-header {
                background: #f8f9fa;
                border-bottom: 1px solid #f1f2f6;
                padding: 1.5rem;
            }

            .modal-title {
                color: #2d3436;
                font-weight: 600;
            }

            .modal-body {
                padding: 2rem;
            }

            /* Form Styles */
            .form-label {
                color: #2d3436;
                font-weight: 500;
                margin-bottom: 0.5rem;
            }

            .form-control {
                border: 1px solid #e9ecef;
                border-radius: 8px;
                padding: 0.8rem 1rem;
                transition: all 0.3s ease;
            }

            .form-control:focus {
                border-color: #4834d4;
                box-shadow: 0 0 0 3px rgba(72, 52, 212, 0.1);
            }

            /* Responsive Design */
            @media (max-width: 768px) {
                .content-main {
                    padding: 1rem;
                }

                .content-header {
                    flex-direction: column;
                    gap: 1rem;
                    text-align: center;
                }

                .action-buttons {
                    flex-direction: column;
                }
            }
        </style>
    </head>

    <body>
        <section class="content-main">
            <div class="content-header">
                <h2 class="content-title card-title">Category</h2>
                <!-- Add Category Button (Top Right) -->
                <span class="col-6 text-end mb-4">
                    <button class="btn btn-primary" onclick="showCategoryModal()">Add Category</button>
                </span>
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <!-- Categories Table -->
                        <div class="col-12 ml-10">
                            <div class="table-responsive">
                                <table class="table table-hover bg-light w-100 p">
                                    <thead>
                                        <tr>
                                            <th>No</th>
                                            <th>categoryName</th>
                                            <th>Description</th>
                                            <th>Offer (%)</th>
                                            <th class="text-center">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% cat.reverse().forEach((category, i)=> { %>
                                            <tr>
                                                <td>
                                                    <%= i + 1 %>
                                                </td>
                                                <td>
                                                    <%= category.categoryName%>
                                                </td>
                                                <td>
                                                    <%= category.description %>
                                                </td>
                                                <td>
                                                    <%= category.categoryOffer %>%
                                                </td>
                                                <td class="text-end">
                                                    <div class="action-buttons d-flex justify-content-center">
                                                        <% if (category.isListed) { %>
                                                            <a href="/admin/listCategory?id=<%=category._id %>"
                                                                class="btn btn-warning btn-sm mx-1">List</a>
                                                            <% } else { %>
                                                                <a href="/admin/unlistCategory?id=<%= category._id %>"
                                                                    class="btn btn-success btn-sm mx-1">Unlist</a>
                                                                <% } %>
                                                                    <div class="action-buttons d-flex">
                                                                        <button class="btn btn-google"
                                                                            onclick="openEditModal('<%= category._id %>','<%= category.categoryName %>','<%= category.description %>','<%= category.categoryOffer %>')">
                                                                            Edit
                                                                        </button>
                                                                    </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            <% }); %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!-- add  cateogory modal-->

            <!-- Modal Structure -->
            <div class="modal fade" id="addCategoryModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add New Category</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="addCategoryForm" onsubmit="return validateForm()">
                                <div class="mb-4">
                                    <label for="categoryName" class="form-label">Category Name</label>
                                    <input type="text" name="name" placeholder="Type here" class="form-control"
                                        id="categoryName" />
                                    <span id="name-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <div class="mb-4">
                                    <label for="descriptionId" class="form-label">Description</label>
                                    <textarea placeholder="Type here" name="description" class="form-control"
                                        id="descriptionId"></textarea>
                                    <span id="description-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <div class="mb-4">
                                    <label for="categoryOffer" class="form-label">Category Offer (%)</label>
                                    <input type="number" name="offer" placeholder="Enter offer percentage"
                                        class="form-control" id="categoryOffer" min="0" max="100" />
                                    <span id="offer-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-primary" type="submit">Create Category</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>



            <!---------EDIT MODAL-------------->

            <div class="modal fade" id="editCategoryModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Category</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="editCategoryForm" onsubmit="handleEditCategory(event)">
                                <div class="mb-4">
                                    <label for="editCategoryName" class="form-label">Category Name</label>
                                    <input type="text" id="editCategoryName" name="categoryName" placeholder="Type here"
                                        class="form-control" />
                                    <span id="edit-name-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <div class="mb-4">
                                    <label for="editDescriptionId" class="form-label">Description</label>
                                    <textarea id="editDescriptionId" name="description" placeholder="Type here"
                                        class="form-control"></textarea>
                                    <span id="edit-description-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <div class="mb-4">
                                    <label for="editCategoryOffer" class="form-label">Category Offer (%)</label>
                                    <input type="number" id="editCategoryOffer" name="offer"
                                        placeholder="Enter offer percentage" class="form-control" min="0" max="100" />
                                    <span id="edit-offer-error" class="error-message text-danger"
                                        style="display: none;"></span>
                                </div>
                                <input type="hidden" id="editCategoryId" name="id" />
                                <div class="d-grid">
                                    <button class="btn btn-primary" type="submit">Save Changes</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>




            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

            <script>


                // Add category form submission
                document.getElementById('addCategoryForm').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    if (!validateForm()) return;

                    const formData = new FormData(event.target);
                    const categoryData = {
                        name: formData.get('name'),
                        description: formData.get('description'),
                        offer: formData.get('offer')
                    };

                    try {
                        const response = await fetch("/admin/addCategory", {
                            method: "POST",
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(categoryData)
                        });

                        const data = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message || "Category added successfully",
                                icon: 'success',
                                confirmButtonText: 'OK',
                                timer: 2000,
                                timerProgressBar: true
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: data.message || "Failed to add Category",
                                icon: 'error',
                                confirmButtonText: 'Retry',
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error(error);
                        Swal.fire({
                            title: 'Error',
                            text: "An unexpected error occurred",
                            icon: 'error',
                            timer: 2000
                        });
                    }
                });



                // Form validation function
                function validateForm() {
                    clearErrorMessages();

                    const name = document.getElementById('categoryName').value.trim();
                    const description = document.getElementById('descriptionId').value.trim();
                    const offer = document.getElementById('categoryOffer').value;
                    let isValid = true;

                    const nameRegex = /^[a-zA-Z\s]+$/;

                    // Validate Category Name
                    if (!name) {
                        document.getElementById('name-error').textContent = 'Category name is required.';
                        document.getElementById('name-error').style.display = 'inline';
                        isValid = false;
                    } else if (!nameRegex.test(name)) {
                        document.getElementById('name-error').textContent = 'Category name must contain only letters and spaces.';
                        document.getElementById('name-error').style.display = 'inline';
                        isValid = false;
                    }

                    // Validate Description
                    if (!description) {
                        document.getElementById('description-error').textContent = 'Description is required.';
                        document.getElementById('description-error').style.display = 'inline';
                        isValid = false;
                    }

                    // Validate Offer
                    if (offer < 0 || offer > 100) {
                        document.getElementById('offer-error').textContent = 'Offer must be between 0 and 100.';
                        document.getElementById('offer-error').style.display = 'inline';
                        isValid = false;
                    }

                    return isValid;
                }


                function clearErrorMessages() {
                    const errorElements = document.querySelectorAll('.error-message');
                    errorElements.forEach((element) => {
                        element.textContent = '';
                        element.style.display = 'none';
                    });
                }


                //Modal Structure add
                function showCategoryModal() {
                    const addCategoryModal = new bootstrap.Modal(document.getElementById('addCategoryModal'));
                    addCategoryModal.show();
                }
                //-----------------EDIT------------




                // Form validation function
                function validateForm() {
                    clearErrorMessages();

                    const name = document.getElementById('categoryName').value.trim();
                    const description = document.getElementById('descriptionId').value.trim();
                    const offer = document.getElementById('categoryOffer').value;
                    let isValid = true;

                    const nameRegex = /^[a-zA-Z\s]+$/;

                    // Validate Category Name
                    if (!name) {
                        document.getElementById('name-error').textContent = 'Category name is required.';
                        document.getElementById('name-error').style.display = 'inline';
                        isValid = false;
                    } else if (!nameRegex.test(name)) {
                        document.getElementById('name-error').textContent = 'Category name must contain only letters and spaces.';
                        document.getElementById('name-error').style.display = 'inline';
                        isValid = false;
                    }

                    // Validate Description
                    if (!description) {
                        document.getElementById('description-error').textContent = 'Description is required.';
                        document.getElementById('description-error').style.display = 'inline';
                        isValid = false;
                    }

                    // Validate Offer
                    if (offer < 0 || offer > 100) {
                        document.getElementById('offer-error').textContent = 'Offer must be between 0 and 100.';
                        document.getElementById('offer-error').style.display = 'inline';
                        isValid = false;
                    }

                    return isValid;
                }


                function openEditModal(id, categoryName, description, offer) {
    const modal = new bootstrap.Modal(document.getElementById('editCategoryModal'));
    modal.show();

    document.getElementById('editCategoryId').value = id;
    document.getElementById('editCategoryName').value = categoryName;
    document.getElementById('editDescriptionId').value = description;
    document.getElementById('editCategoryOffer').value = offer;
}

                // Handle edit category submission
                async function handleEditCategory(event) {
                    event.preventDefault();

                    const id = document.getElementById('editCategoryId').value;
                    const categoryName = document.getElementById('editCategoryName').value.trim();
                    const description = document.getElementById('editDescriptionId').value.trim();
                    const offer = document.getElementById('editCategoryOffer').value;

                    // Validation
                    if (!validateEditForm()) return;

                    try {
                        const response = await fetch(`/admin/editCategory/${id}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ categoryName, description, offer }),
                        });

                        const data = await response.json();

                        if (response.ok) {
                            Swal.fire({
                                title: "Success",
                                text: "Category updated successfully",
                                icon: "success",
                                timer: 2000,
                                timerProgressBar: true,
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                title: "Error",
                                text: data.message || "Failed to update category",
                                icon: "error",
                                timer: 2000
                            });
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        Swal.fire({
                            title: "Error",
                            text: "An unexpected error occurred",
                            icon: "error",
                            timer: 2000
                        });
                    }
                }



                //---------EDIT VALIDATION------

                // Function to validate the edit form
                function validateEditForm() {
                    clearEditErrorMessages();

                    const name = document.getElementById('editCategoryName').value.trim();
                    const description = document.getElementById('editDescriptionId').value.trim();

                    const nameRegex = /^[a-zA-Z\s]+$/;
                    let isValid = true;

                    // Validate Name
                    if (!name) {
                        displayEditErrorMessage('edit-name-error', 'Category name is required.');
                        isValid = false;
                    } else if (!nameRegex.test(name)) {
                        displayEditErrorMessage('edit-name-error', 'Category name must contain only letters and spaces.');
                        isValid = false;
                    }

                    // Validate Description
                    if (!description) {
                        displayEditErrorMessage('edit-description-error', 'Description is required.');
                        isValid = false;
                    }

                    return isValid;
                }

                // Helper function to display error messages
                function displayEditErrorMessage(elementId, message) {
                    const errorElement = document.getElementById(elementId);
                    errorElement.textContent = message;
                    errorElement.style.display = 'block';
                }

                // Helper function to clear error messages
                function clearEditErrorMessages() {
                    const errorElements = document.querySelectorAll('.error-message');
                    errorElements.forEach((element) => {
                        element.textContent = '';
                        element.style.display = 'none';
                    });
                }







                //list and unlist manage------------------------

                document.addEventListener('click', function (event) {
                    const button = event.target;

                    if (button.classList.contains('list-btn') || button.classList.contains('unlist-btn')) {
                        event.preventDefault();

                        const categoryId = button.dataset.id;
                        const action = button.classList.contains('list-btn') ? 'list' : 'unlist';

                        fetch(`/admin/${action}Category`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ id: categoryId })
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {

                                    if (action === 'list') {
                                        button.classList.remove('list-btn', 'btn-success');
                                        button.classList.add('unlist-btn', 'btn-warning');
                                        button.textContent = 'Unlist';
                                    } else {
                                        button.classList.remove('unlist-btn', 'btn-warning');
                                        button.classList.add('list-btn', 'btn-success');
                                        button.textContent = 'List';
                                    }
                                } else {

                                    Swal.fire('Action failed: ' + data.message);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire('An error occurred. Please try again.');
                            });
                    }
                });

            </script>

            <%- include("../../views/partials/admin/footer") %>